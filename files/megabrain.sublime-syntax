%YAML 1.2
---
file_extensions:
  - oni
  - onion
scope: source.onion
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while|do|def|try|init|class|foreach|E|PI|GOLDEN_RATIO|key_press|eval|length)\b'
      scope: keyword.declaration.function.inline
    - match: '\b(sin|cos|new_dictionary|add|cmd|throw_new_exception|get_by_key|input|sleep|new_arr|get_arr|sout_element|new_stack|get_stack|split|append|get_by_index|)\b'
      scope: entity.name.function
    - match: '\b(use|import)\b'
      scope: keyword.control.import
    - match: '\b(return|to|sout|not|print|stop|continue)\b'
      scope: markup.bold
    - match: '\b(exit|n)\b'
      scope: constant
    - match: '\b(var|as_var|variable|to_import)\b'
      scope: variable
    - match: '\b(true|false|to_string|to_bool|NULL|to_int)\b'
      scope: constant.character.escape
    - match: '\b(math)\b'
      scope: constant.character

    # Numbers
    - match: '\b(-)?[0-9<>:;]+\b'
      scope: constant.numeric.example-c

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: ''
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: '$'
      pop: true
